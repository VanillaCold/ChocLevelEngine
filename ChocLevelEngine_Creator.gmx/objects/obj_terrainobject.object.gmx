<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_templatetexture</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_levelentry</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 3
texture = sprite_get_name(spr_templatetexture)
texid = spr_templatetexture
mtoggle = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    for(i = 0; i &lt; 4; i += 1)
        {
        instance_destroy(points[i])
        }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !variable_instance_exists(self,"points")
    {
    points = array_create(4)
    points[0] = instance_create(x-25,y-25,obj_terrainpoint)
    points[1] = instance_create(x+25,y-25,obj_terrainpoint)
    points[2] = instance_create(x-25,y+25,obj_terrainpoint)
    points[3] = instance_create(x+25,y+25,obj_terrainpoint)
    for(i=0;i&lt;4;i++)
        {
        points[i].origin = self
        if i = 1 or i = 0 points[i].height = -1
        else points[i].height = 1
        
        if i = 0 or i = 2 points[i].width = -1
        else points[i].width = 1
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//point_in_triangle(px, py, x1, y1, x2, y2, x3, y3);


if variable_instance_exists(self,"points")
    {
    if points[0] != noone 
        {
        
        //failsafe!
        /*if (points[0].x = points[1].x &amp;&amp; points[1].x = points[2].x &amp;&amp; points[2].x = points[3].x)
            {
            points[0].x += 25;
            points[1].x -= 25;
            points[2].x += 25;
            points[3].x -= 25;
            }
            
        if (points[0].y = points[1].y &amp;&amp; points[1].y = points[2].y &amp;&amp; points[2].y = points[3].y)
            {
            points[0].y -= 25;
            points[1].y -= 25;
            //points[2].y += 25;
            //points[3].y += 25;
            }*/
        
        
        x = (points[0].x +points[1].x + points[2].x +points[3].x) / 4
        y = (points[0].y +points[1].y + points[2].y +points[3].y) / 4
        if (point_in_triangle(mouse_x,mouse_y,points[0].x,points[0].y,points[1].x,points[1].y,points[2].x,points[2].y)
        or point_in_triangle(mouse_x,mouse_y,points[3].x,points[3].y,points[2].x,points[2].y,points[1].x,points[1].y))
        &amp;&amp; !place_meeting(mouse_x,mouse_y,obj_gameobject)
        &amp;&amp; !place_meeting(mouse_x,mouse_y,obj_uisidebar)
        //&amp;&amp; !place_meeting(mouse_x,mouse_y,obj_terrainpoint)
            {   
            if mouse_check_button_pressed (mb_left) mtoggle = 1
            if mouse_check_button_released(mb_left) or place_meeting(mouse_x,mouse_y,obj_uisidebar) mtoggle = 0
            if mouse_check_button_released(mb_right){instance_destroy()}
            if keyboard_check_released(vk_shift)
                {
                texid = spr_templatetexture
                texture = get_string("Terrain texture:","")
                for(var i = 0;i&lt;global.terrainnum;i++)   
                if global.terrain_names[i] = texture or global.terrain_names[i] = texture+string(".png")
                    {
                    texid = global.terrain_array[i]
                    break;
                    }
                else if texid = spr_templatetexture &amp;&amp; i = global.terrainnum
                    {
                    texid = spr_templatetexture
                    texture = "spr_templatexture"
                    }
                }
            }
        if mouse_check_button_released(mb_left)mtoggle = 0
        if mtoggle
            {
                
            if mouse_check_button(mb_left) &amp;&amp; points[0].moving = 0 &amp;&amp; points[1].moving = 0 
            &amp;&amp; points[2].moving = 0 &amp;&amp; points[3].moving = 0
                {
                xmult = (mouse_x-x)/3;
                ymult = (mouse_y-y)/3;
                if global.gridmode = 1 
                    {
                    xmult = round((mouse_x-x)/16)*16;
                    ymult = round((mouse_y-y)/16)*16;
                    }
                
                   
                
                x += xmult
                y += ymult
                    
                for(var i=0;i&lt;4;i++)
                    {
                    with(points[i])
                        {
                        x += origin.xmult
                        y += origin.ymult
                        
                        }
                    }
                
                }
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !sprite_exists(texid)
    {
    texture = "spr_templatetexture"
    texid = spr_templatetexture
    }

if variable_instance_exists(self,"points")
    {
    if points[0] != noone &amp;&amp; points[1] != noone
    &amp;&amp; points[2] != noone &amp;&amp; points[3] != noone
    {
    
    if (point_in_triangle(mouse_x,mouse_y,points[0].x,points[0].y,points[1].x,points[1].y,points[2].x,points[2].y)
    or point_in_triangle(mouse_x,mouse_y,points[3].x,points[3].y,points[2].x,points[2].y,points[1].x,points[1].y))
    &amp;&amp; mouse_check_button(mb_right)
    &amp;&amp; !place_meeting(mouse_x,mouse_y,obj_gameobject)
    &amp;&amp; !place_meeting(mouse_x,mouse_y,obj_uisidebar)
        {
        draw_set_colour(c_red)
        }
    else draw_set_colour(c_white)

    
    //draw_triangle(points[0].x,points[0].y,points[1].x,points[1].y,points[2].x,points[2].y,0)
    var tex = sprite_get_texture(texid,0)
    var tex2 = sprite_get_texture(texid,1)
    texture_set_repeat(true)
    draw_primitive_begin_texture(pr_trianglestrip,tex);
    if !variable_instance_exists(points[0],"height")
        {
        for(i=0;i&lt;4;i++)
            {
            points[i].origin = self
            if i = 1 or i = 0 points[i].height = -1
            else points[i].height = 1
            
            if i = 0 or i = 2 points[i].width = -1
            else points[i].width = 1
            }
        }
    minx = min(points[0].x,points[1].x,points[2].x,points[3].x) //setup minimum/maximum x and y values
    maxx = max(points[0].x,points[1].x,points[2].x,points[3].x)
    miny = min(points[0].y,points[1].y,points[2].y,points[3].y)
    maxy = max(points[0].y,points[1].y,points[2].y,points[3].y)
    mwidth = maxx-minx
    mheight = miny-maxy
    
    //for(i = 0; i &lt; 4; i += 1)
        //{
        //
        var minx1 = max(points[0].x,points[1].x,points[2].x)
        var miny1 = max(points[0].y,points[1].y,points[2].y)
        
        //draw_vertex_texture(points[0].x,points[0].y,points[0].width*((points[0].x-minx1)/sprite_get_width(texid)),points[0].height*((points[0].y-miny1)/sprite_get_height(texid)));
        //draw_vertex_texture(points[1].x,points[1].y,points[1].width*((points[1].x-minx1)/sprite_get_width(texid)),points[1].height*((points[1].y-miny1)/sprite_get_height(texid)));
        //draw_vertex_texture(points[2].x,points[2].y,points[2].width*((points[2].x-minx1)/sprite_get_width(texid)),points[2].height*((points[2].y-miny1)/sprite_get_height(texid)));
        
        draw_vertex_texture(points[0].x,points[0].y,(points[0].x-minx)/sprite_get_width(texid),(points[0].y-miny)/sprite_get_height(texid));
        draw_vertex_texture(points[1].x,points[1].y,(points[1].x-minx)/sprite_get_width(texid),(points[1].y-miny)/sprite_get_height(texid));
        draw_vertex_texture(points[2].x,points[2].y,(points[2].x-minx)/sprite_get_width(texid),(points[2].y-miny)/sprite_get_height(texid));
        
        //}
        
        draw_primitive_end()

        
        draw_primitive_begin_texture(pr_trianglestrip,tex);
        var minx2 = min(points[3].x,points[1].x,points[2].x)
        var miny2 = min(points[3].y,points[1].y,points[2].y)
        //draw_vertex_texture(points[3].x,points[3].y,points[3].width*((points[3].x-minx2)/sprite_get_width(texid)),points[3].height*((points[3].y-miny2)/sprite_get_height(texid)));
        //draw_vertex_texture(points[1].x,points[1].y,points[1].width*((points[1].x-minx2)/sprite_get_width(texid)),points[1].height*((points[1].y-miny2)/sprite_get_height(texid)));
        //draw_vertex_texture(points[2].x,points[2].y,points[2].width*((points[2].x-minx2)/sprite_get_width(texid)),points[2].height*((points[2].y-miny2)/sprite_get_height(texid)));
        
        draw_vertex_texture(points[3].x,points[3].y,(points[3].x-minx)/sprite_get_width(texid),(points[3].y-miny)/sprite_get_height(texid));
        draw_vertex_texture(points[1].x,points[1].y,(points[1].x-minx)/sprite_get_width(texid),(points[1].y-miny)/sprite_get_height(texid));
        draw_vertex_texture(points[2].x,points[2].y,(points[2].x-minx)/sprite_get_width(texid),(points[2].y-miny)/sprite_get_height(texid));
        
    draw_primitive_end()
    
    
    draw_primitive_begin_texture(pr_trianglestrip,tex2)
    
    draw_vertex_texture(points[0].x,points[0].y,points[0].width*((points[0].x-points[0].x)/sprite_get_width(texid)),0);
    draw_vertex_texture(points[1].x,points[1].y,points[1].width*((points[1].x-points[0].x)/sprite_get_width(texid)),0);
    draw_vertex_texture(points[0].x,points[0].y+sprite_get_height(texid),points[0].width*((points[0].x-points[0].x)/sprite_get_width(texid)),0.99);
    draw_vertex_texture(points[1].x,points[1].y+sprite_get_height(texid),points[1].width*((points[1].x-points[0].x)/sprite_get_width(texid)),0.99);
    
    draw_primitive_end()
        }
    }
draw_set_colour(c_white)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
