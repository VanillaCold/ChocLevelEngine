<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_templatetexture</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set variables- actually wait, some of these are useless.
alarm[0] = 3
//texture = sprite_get_name(spr_templatetexture)
mtoggle = 0
spr = 0;
sprite_new = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stop potentially huge memory leak
if sprite_new != noone sprite_delete(sprite_new)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///okay so technically I don't need this, it's for the level editor.
if !variable_instance_exists(self,"points")
    {
    points = array_create(4)
    points[0] = instance_create(x-25,y-25,obj_terrainpoint)
    points[1] = instance_create(x+25,y-25,obj_terrainpoint)
    points[2] = instance_create(x-25,y+25,obj_terrainpoint)
    points[3] = instance_create(x+25,y+25,obj_terrainpoint)
    for(i=0;i&lt;4;i++)
        {
        points[i].origin = self
        if i = 1 or i = 0 points[i].height = 0
        else points[i].height = 1
        
        if i = 0 or i = 2 points[i].width = 0
        else points[i].width = 1
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///this is all just pointless, move on
//point_in_triangle(px, py, x1, y1, x2, y2, x3, y3);


if variable_instance_exists(self,"points") &amp;&amp; !variable_instance_exists(self,"donewithdrawing")
    {
    if false
        {
        
        
        x = (points[0].x +points[1].x + points[2].x +points[3].x) / 4
        y = (points[0].y +points[1].y + points[2].y +points[3].y) / 4
        if point_in_triangle(mouse_x,mouse_y,points[0].x,points[0].y,points[1].x,points[1].y,points[2].x,points[2].y)
        or point_in_triangle(mouse_x,mouse_y,points[3].x,points[3].y,points[2].x,points[2].y,points[1].x,points[1].y)
        //&amp;&amp; !place_meeting(mouse_x,mouse_y,obj_gameobject)
        //&amp;&amp; !place_meeting(mouse_x,mouse_y,obj_uisidebar)
        &amp;&amp; !place_meeting(mouse_x,mouse_y,obj_terrainpoint)
            {
            //nothing. just nothing.  
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
///create/use terrain sprite

if variable_instance_exists(self,"points") &amp;&amp; !variable_instance_exists(self,"donewithdrawing") //check if object should draw surface or sprite
    {
    if points[0] != noone &amp;&amp; points[1] != noone
    &amp;&amp; points[2] != noone &amp;&amp; points[3] != noone
    {
    minx = min(points[0].x,points[1].x,points[2].x,points[3].x) //setup minimum/maximum x and y values
    maxx = max(points[0].x,points[1].x,points[2].x,points[3].x)
    miny = min(points[0].y,points[1].y,points[2].y,points[3].y)
    maxy = max(points[0].y,points[1].y,points[2].y,points[3].y)
    x = (maxx+minx)/2
    y = (maxy+miny)/2
    
    width = maxx-minx
    height = maxy-miny
    
    surf = surface_create(width,height) //create surface
    surface_set_target(surf)
    var tex = sprite_get_texture(asset_get_index(texture),0)
    var tex2 = sprite_get_texture(asset_get_index(texture),1)
    texid = asset_get_index(texture)
    texture_set_repeat(true)
    draw_primitive_begin_texture(pr_trianglestrip,tex); //start drawing object to the surface
    
    if !variable_instance_exists(points[0],"height") //make sure the points are all setup properly
        {
        for(i=0;i&lt;4;i++)
            {
            points[i].origin = self
            if i = 1 or i = 0 points[i].height = 0
            else points[i].height = 1
            
            if i = 0 or i = 2 points[i].width = 0
            else points[i].width = 1
            }
        }
    //for(i = 0; i &lt; 4; i += 1)
        //{
        //
         //draw_vertex_texture(points[i].x-minx,points[i].y-miny,points[i].width*((points[i].x-minx)/sprite_get_width(texid)),points[i].height*((points[i].y-miny)/sprite_get_height(texid)));
        //}
    var minx1 = max(points[0].x-minx,points[1].x-minx,points[2].x-minx)
    var miny1 = max(points[0].y-miny,points[1].y-miny,points[2].y-miny)
    draw_vertex_texture(points[0].x-minx,points[0].y-miny,points[0].width*((points[0].x-minx1)/sprite_get_width(texid)),points[0].height*((points[0].y-miny1)/sprite_get_height(texid)));
    draw_vertex_texture(points[1].x-minx,points[1].y-miny,points[1].width*((points[1].x-minx1)/sprite_get_width(texid)),points[1].height*((points[1].y-miny1)/sprite_get_height(texid)));
    draw_vertex_texture(points[2].x-minx,points[2].y-miny,points[2].width*((points[2].x-minx1)/sprite_get_width(texid)),points[2].height*((points[2].y-miny1)/sprite_get_height(texid)));
        
    draw_primitive_end()
    
    draw_primitive_begin_texture(pr_trianglestrip,tex);
        var minx2 = min(points[3].x-minx,points[1].x-minx,points[2].x-minx)
        var miny2 = min(points[3].y-miny,points[1].y-miny,points[2].y-miny)
        draw_vertex_texture(points[3].x-minx,points[3].y-miny,points[3].width*((points[3].x-minx2)/sprite_get_width(texid)),points[3].height*((points[3].y-miny2)/sprite_get_height(texid)));
        draw_vertex_texture(points[1].x-minx,points[1].y-miny,points[1].width*((points[1].x-minx2)/sprite_get_width(texid)),points[1].height*((points[1].y-miny2)/sprite_get_height(texid)));
        draw_vertex_texture(points[2].x-minx,points[2].y-miny,points[2].width*((points[2].x-minx2)/sprite_get_width(texid)),points[2].height*((points[2].y-miny2)/sprite_get_height(texid)));
        
    draw_primitive_end()
    
    draw_primitive_begin_texture(pr_trianglestrip,tex2)
    /*draw_vertex_texture(points[0].x-minx,points[0].y-miny,points[0].width*((points[0].x-minx)/sprite_get_width(texid)),0);
    draw_vertex_texture(points[1].x-minx,points[1].y-miny,points[1].width*((points[1].x-minx)/sprite_get_width(texid)),0);
    draw_vertex_texture(points[0].x-minx,points[0].y+32-miny,points[0].width*((points[0].x-minx)/sprite_get_width(texid)),1);
    draw_vertex_texture(points[1].x-minx,points[1].y+32-miny,points[1].width*((points[1].x-minx)/sprite_get_width(texid)),1);*/
    
    draw_vertex_texture(points[0].x-minx,points[0].y-miny,points[0].width*((points[0].x-minx)/sprite_get_width(texid)),0);
    draw_vertex_texture(points[1].x-minx,points[1].y-miny,points[1].width*((points[1].x-minx)/sprite_get_width(texid)),0);
    draw_vertex_texture(points[0].x-minx,points[0].y+sprite_get_height(texid)-miny,points[0].width*((points[0].x-points[0].x)/sprite_get_width(texid)),0.99);
    draw_vertex_texture(points[1].x-minx,points[1].y+sprite_get_height(texid)-miny,points[1].width*((points[1].x-points[0].x)/sprite_get_width(texid)),0.99);
    draw_primitive_end()
        }
    surface_reset_target()
    sprite_new = sprite_create_from_surface(surf,0,0,width,height,0,0,width/2,height/2) //create a sprite from the surface
    sprite_collision_mask(sprite_new,0,0,0,0,width,height,0,0)
    sprite_index = sprite_new
    surface_free(surf) //abolish the surface.
    instance_destroy(points[0]);instance_destroy(points[1]);instance_destroy(points[2]);instance_destroy(points[3]) //destroy the terrain points, we don't need 'em anymore
    donewithdrawing = 1 //we are done with drawing. yay.
    }
    
if variable_instance_exists(self,"donewithdrawing") &amp;&amp; sprite_new != noone //if the sprite is ready to use, just draw said sprite.
    {
    draw_sprite(sprite_new,0,x,y)
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
